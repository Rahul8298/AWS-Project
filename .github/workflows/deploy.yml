name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]

env:
  # Environment Variables
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  IMAGE_TAG: ${{ github.sha }} 

jobs:
  Deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write      
      contents: read

    steps:
      # Checkout Code Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configure AWS credentials 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        working-directory: ./Terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./Terraform
        run: terraform plan -out=tfplan -var="container_image_tag=$IMAGE_TAG"

      - name: Terraform Apply
        working-directory: ./Terraform
        run: terraform apply -auto-approve tfplan 

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and Push Docker image
      - name: Build and Push Docker image
        working-directory: ./Application
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Force new ECS deployment
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
