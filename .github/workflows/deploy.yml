name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: demo-aws-project-app   # ðŸ‘ˆ change if needed
  ECS_CLUSTER: demo-aws-project-cluster
  ECS_SERVICE: demo-aws-project-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write      # ðŸ‘ˆ needed for OIDC
      contents: read
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ðŸ”¹ Configure AWS credentials (using OIDC is better than static keys)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # ðŸ”¹ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # ðŸ”¹ Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ðŸ”¹ Build and Push Docker image
      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}   # ðŸ‘ˆ use commit SHA for unique tags
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # ðŸ”¹ Force new ECS deployment
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
